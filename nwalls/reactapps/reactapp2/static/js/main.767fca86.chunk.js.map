{"version":3,"sources":["components/header.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","totalCounters","react_default","a","createElement","className","Counter","_this","this","props","counter","id","getButtonClasses","formatCount","onClick","onIncrementUp","onIncrementDown","onDelete","classes","value","Component","Counters","_this$props","onClear","counters","map","components_counter","key","App","state","handleClear","c","setState","handleDelete","counterId","filter","handleIncrementUp","Object","toConsumableArray","index","indexOf","objectSpread","handleIncrementDown","Fragment","header","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.767fca86.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst Header = ({totalCounters}) => {\r\n\treturn (\r\n\t\t<div className=\"header\">\r\n\t\t\t<h1>Stupid little React App</h1>\r\n\t\t\t<p>Counters w/value &gt; zero: <strong>{totalCounters}</strong></p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n\t// state = {\r\n\t// \tvalue: this.props.counter.value,\r\n\t// \t//tags: ['tag1', 'tag2', 'tag3']\r\n\t// };\r\n\r\n\t// constructor(){\r\n\t// \tsuper();\r\n\t// \tthis.handleIncrement = this.handleIncrement.bind(this);\r\n\t// }\r\n\r\n\t// renderTags(){\r\n\t// \tif(this.state.tags.length  <= 0){\r\n\t// \t\treturn <p>No Tags</p>\r\n\t// \t}\r\n\t// \telse{\r\n\t// \t\treturn <ul>{ this.state.tags.map(tag => <li key={tag}>{ tag }</li>)}</ul>\r\n\t// \t}\r\n\t// }\r\n\r\n\t// handleIncrementUp = product => {\r\n\t// \tif(this.state.value < 100){\r\n\t// \t\tthis.setState({ value: this.state.value + 1 });\r\n\t// \t}\r\n\t// \t//console.log(product);\r\n\t// }\r\n\r\n\t// handleIncrementDown = product => {\r\n\t// \tif(this.state.value > 0){\r\n\t// \t\tthis.setState({ value: this.state.value - 1 });\r\n\t// \t\t//console.log(product);\r\n\t// \t}\r\n\t// }\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"counter\">\r\n\t\t\t\t{/*{this.props.children} */ }\r\n\t\t\t\t <h3>Counter: #{this.props.counter.id}</h3>\r\n\t\t\t\t<span className={ this.getButtonClasses() }>{this.formatCount()}</span>\r\n\t\t\t\t<button onClick={ () => this.props.onIncrementUp(this.props.counter) } className=\"increment up\">+</button>\r\n\t\t\t\t<button onClick={ () => this.props.onIncrementDown(this.props.counter) } className=\"increment down\">-</button>\r\n\t\t\t\t<button onClick={ () => this.props.onDelete(this.props.counter.id) } className=\"delete\">X</button>\r\n\t\t\t\t{/*<div className=\"tags\">\r\n\t\t\t\t\t{ this.state.tags.length === 0 && \"Create new tag\" }\r\n\t\t\t\t\t{ this.renderTags() }\r\n\t\t\t\t</div>*/}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tgetButtonClasses(){\r\n\t\tlet classes = \"count \";\r\n\t\tclasses += (this.props.counter.value === 0 || this.props.counter.value === 100) ? 'warn' : '';\r\n\t\treturn classes;\r\n\t}\r\n\r\n\tformatCount(){\r\n\t\tconst { value } = this.props.counter;\r\n\t\treturn value === 0 ? '0' : value;\r\n\t}\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component {\r\n\t\r\n\t// state = {\r\n\t// \tcounters: [\r\n\t// \t\t{\r\n\t// \t\t\tid: 1,\r\n\t// \t\t\tvalue: 1\r\n\t// \t\t},\r\n\t// \t\t{\r\n\t// \t\t\tid: 2,\r\n\t// \t\t\tvalue: 4\r\n\t// \t\t},\r\n\t// \t\t{\r\n\t// \t\t\tid: 3,\r\n\t// \t\t\tvalue: 97\r\n\t// \t\t},\r\n\t// \t\t{\r\n\t// \t\t\tid: 4,\r\n\t// \t\t\tvalue: 0\r\n\t// \t\t}\r\n\t// \t]\r\n\t// };\r\n\r\n\t// handleClear = () =>{\r\n\t// \tconst counters = this.state.counters.map(c => {\r\n\t// \t\tc.value = 0;\r\n\t// \t\treturn c;\r\n\t// \t});\r\n\t// \tthis.setState({ counters });\r\n\t// };\r\n\r\n\t// handleDelete = (counterId) => {\r\n\t// \tconst counters = this.state.counters.filter(c => c.id !== counterId);\r\n\t// \tthis.setState({ counters: counters });\r\n\t// };\r\n\r\n\t// handleIncrementUp = (counter) => {\r\n\t// \tconst counters = [...this.state.counters];\r\n\t// \tconst index = counters.indexOf(counter);\r\n\t// \tcounters[index] = { ...counter };\r\n\t// \tif(counters[index].value < 100){\r\n\t// \t\tcounters[index].value++;\r\n\t// \t\tthis.setState({ counters });\r\n\t// \t}\r\n\t// }\r\n\r\n\t// handleIncrementDown = (counter) => {\r\n\t// \tconst counters = [...this.state.counters];\r\n\t// \tconst index = counters.indexOf(counter);\r\n\t// \tcounters[index] = { ...counter };\r\n\t// \tif(counters[index].value > 0){\r\n\t// \t\tcounters[index].value--;\r\n\t// \t\tthis.setState({ counters });\r\n\t// \t}\r\n\t// }\r\n\r\n\trender() {\r\n\t\tconst {onClear, counters, onIncrementUp, onIncrementDown, onDelete} = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button className=\"clear\" onClick={onClear} >Clear All</button>\r\n\t\t\t\t{ counters.map(counter => \r\n\r\n\t\t\t\t\t<Counter\r\n\t\t\t\t\t\tkey={counter.id}\r\n\t\t\t\t\t\tonIncrementUp={onIncrementUp}\r\n\t\t\t\t\t\tonIncrementDown={onIncrementDown}\r\n\t\t\t\t\t\tonDelete={onDelete}\r\n\t\t\t\t\t\tcounter={counter} >\r\n\t\t\t\t\t{/*<Counter key={counter.id} onDelete={this.handleDelete} value={counter.value} id={counter.id} >\r\n\t\t\t\t\t\t<h3>Counter #{counter.id}</h3>*/ }\r\n\t\t\t\t\t</Counter>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from 'react';\n//import logo from './logo.svg';\n//import './App.css';\nimport Header from './components/header';\nimport Counters from './components/counters';\n\nclass App extends Component {\n\n\n\tstate = {\n\t\tcounters: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tvalue: 4\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tvalue: 97\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 4,\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t]\n\t};\n\n\thandleClear = () =>{\n\t\tconst counters = this.state.counters.map(c => {\n\t\t\tc.value = 0;\n\t\t\treturn c;\n\t\t});\n\t\tthis.setState({ counters });\n\t};\n\n\thandleDelete = (counterId) => {\n\t\tconst counters = this.state.counters.filter(c => c.id !== counterId);\n\t\tthis.setState({ counters: counters });\n\t};\n\n\thandleIncrementUp = (counter) => {\n\t\tconst counters = [...this.state.counters];\n\t\tconst index = counters.indexOf(counter);\n\t\tcounters[index] = { ...counter };\n\t\tif(counters[index].value < 100){\n\t\t\tcounters[index].value++;\n\t\t\tthis.setState({ counters });\n\t\t}\n\t};\n\n\thandleIncrementDown = (counter) => {\n\t\tconst counters = [...this.state.counters];\n\t\tconst index = counters.indexOf(counter);\n\t\tcounters[index] = { ...counter };\n\t\tif(counters[index].value > 0){\n\t\t\tcounters[index].value--;\n\t\t\tthis.setState({ counters });\n\t\t}\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Header totalCounters={this.state.counters.filter(c => c.value > 0).length} />\n\t\t\t\t<div className=\"app-main\">\n\t\t\t\t\t<Counters\n\t\t\t\t\t\tcounters={this.state.counters} \n\t\t\t\t\t\tonClear={this.handleClear}\n\t\t\t\t\t\tonIncrementUp={this.handleIncrementUp}\n\t\t\t\t\t\tonIncrementDown={this.handleIncrementDown}\n\t\t\t\t\t\tonDelete={this.handleDelete}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n\t// <React.Fragment>\n\t// \t<Header />\n\t// \t<div className=\"app-main\">\n\t// \t\t<Counters />\n\t// \t</div>\n\t// </React.Fragment>,\n// \tdocument.getElementById('root')\n// );\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root')\n);\n//ReactDOM.render(<Counter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}