/* Version 0.8

	VERSION 0.6 CHANGES:
	    Delicious Hamburger.
	    
	    New in this version: $width, $height, $thickness
	    ex. @include hamburger(40px, 33px, $blue, thin);
	    
	    $thickness can be set to the following (ascending) values:
	    thin, light, medium, bold, black
	    
	    Or, $thickness can be a decimal. This is treated as a ratio of height.
	    ex. $thickness of .2 yeilds bars that are 1/5th the height of $height
	    
	    Rounding and other logic ensures even spacing between bars. This can result
	    in a difference of 1px from your $height with a debug message letting
	    you know what up.
	    
	    NOTE: This mixin requires a span within your hamburger:
	    ex. <a id="hamburger" href="#" data-action="toggle-menu"><span></span></a>

	VERSION 0.7 CHANGES:
		Defaults to display: inline-block so that one may apply this to an <a> with
		minimal configuration.

		Fixed a bug that overwrote numeric arguments for $thickness

		cursor: pointer; is now a default attribute

		Changed all background declarations to background-color

		$method has 3 options: x1, x2, minus, and expand.
		ex: @include hamburger(40px, 33px, .135, thin, minus);

	VERSION 0.8 CHANGES:
		Defaults to block display from inline-block. Seperated the $transition variable 
		into $transition-time and $transition-method.

		Changed default method to x2 from x1.

		Made it so all methods respect the $transition-time and $transition-method
		arguments.

*/

@mixin hamburger(

	$width,
	$height,
	$color,
	$thickness,
	$method: x2,
	$open-color: $color,
	$transition-time: 0.3s, 
	$transition-method: ease-in-out

){

	//if $thickness cannot be parsed
	$computed-thickness: null;
	$computed-height: null;

	//checks $thickness for keywords and sets $computed-thickness to the appropriate value
	@if $thickness==thin {
		$computed-thickness: .06;
	} @else if $thickness==light {
		$computed-thickness: .1;
	} @else if $thickness==medium {
		$computed-thickness: .2;
	} @else if $thickness==bold {
		$computed-thickness: .25;
	} @else if $thickness==black {
		$computed-thickness: .3;
	} @else {
		$computed-thickness: $thickness;
	}
	
	//This sets the height of the bars
	$bar-height: round($height*$computed-thickness);

	//This is checking to make sure the gaps between the bars can be equally divided as to make the bars evenly spaced
	$bar-total: $bar-height * 3;
	$gap-total: $height - $bar-total;

	@if($gap-total % 2 == 0) {
		$computed-height: $height;
	} @else if($gap-total % 2 == 1) {
		$computed-height: $height + 1;
		@debug "From the chef, regarding your hamburger. Your $thickness argument would have yeilded uneven spacing between bars. Your height will be increased by 1 pixel to compensate for this.";
	}

	cursor: pointer;
	display: block;
	@include size($width $computed-height);
	position: relative;
	&:before, &:after {
		content: '';
		@include size(100% $bar-height);
		@include position(absolute, null 0px null 0px);
		background-color: $color;
	}

	&:before { top: 0;    } 
	&:after  { bottom: 0; }

	span {
		display: block;
		@include size(100%);
		&:before, &:after { 
			content: '';
			@include size(100% $bar-height);
			@include position(absolute, (round(($height*.5)-($bar-height/2))) 0px null 0px);
			background-color: $color;
		}
	}

	@if $method == x1 {

		&:before, &:after { 
			@include transition(
				opacity $transition-time $transition-method,
				background-color $transition-time $transition-method
			); 
		}

		span:before, span:after {
			@include transition(
				background-color $transition-time $transition-method,
				transform $transition-time $transition-method
			);
		}

		&[data-property="open"] {
			&:before, &:after {
				background-color: $open-color;
				opacity: 0;
			}

			span:before, span:after { background-color: $open-color; }
			span:before { @include transform(rotate(45deg));  }
			span:after  { @include transform(rotate(-45deg)); }

		}
	}

	@if $method == x2 {

		$transition-stage-1: $transition-time*.6667;
		$transition-stage-2: $transition-time*.3333;

		&:before, &:after { 
			@include transition(
				background-color $transition-time $transition-method,
				top $transition-stage-1 $transition-stage-2 $transition-method, 
				bottom $transition-stage-1 $transition-stage-2 $transition-method, 
				transform $transition-stage-2 $transition-method
			); 
		}

		span:before, span:after {
			@include transition(
				background-color $transition-time $transition-method,
				opacity $transition-time $transition-method
			);
		}

		&[data-property="open"] {
			&:before, &:after {
				background-color: $open-color;
				opacity: 1;
				@include transition(
					background-color $transition-time $transition-method,
					top $transition-stage-1 $transition-method, 
					bottom $transition-stage-1 $transition-method, 
					transform $transition-stage-1 $transition-stage-2 $transition-method
				);
			}

			&:before {
				top: (round(($height*.5)-($bar-height/2)));
				@include transform(rotate(45deg));
			}
			&:after {
				bottom: (round(($height*.5)-($bar-height/2)));
				@include transform(rotate(-45deg));
			}
			span:before, span:after { background-color: $open-color; opacity: 0; }
		}
	}

	@if $method == x3 {
		$transition-segment: $transition-time/3;
		$transition-stage-1: $transition-segment;
		$transition-stage-2: $transition-segment $transition-segment;
		$transition-stage-3: $transition-segment $transition-segment*2;
		$transform-factor: ($width/$bar-height)-1;

		@include transition(transform $transition-stage-3 $transition-method);
		&:before, &:after { 
			color: $open-color;
			left: 50%;
			@include transform(translateX(-50%));
			@include transition(
				top $transition-stage-3 $transition-method, 
				bottom $transition-stage-3 $transition-method, 
				width $transition-stage-2 $transition-method, 
				transform $transition-stage-1 $transition-method
			);
		}

		span:before, span:after { 
			@include transform(scaleX(1)); 
			@include transition(transform $transition-stage-3 $transition-method);
		}

		&[data-property="open"] {
			@include transform(rotate(45deg));
			@include transition(transform $transition-stage-1 $transition-method);
			&:before, &:after {
				background-color: $open-color;
				width: $bar-height;
				@include transition(
					top $transition-stage-1 $transition-method, 
					bottom $transition-stage-1 $transition-method, 
					width $transition-stage-2 $transition-method, 
					transform $transition-stage-3 $transition-method
				);
			}

			&:before {
				@include transform(translateX(-50%) scaleX($transform-factor));
				top: (round(($height*.5)-($bar-height/2)));
			}

			&:after {
				@include transform(translateX(-50%) scaleY($transform-factor));
				bottom: (round(($height*.5)-($bar-height/2)));
			}

			span:before, span:after { 
				background-color: $open-color; 
				@include transform(scaleX(0)); 
				@include transition(transform $transition-stage-1 $transition-method); 
			}
		}
	}

	@if $method == minus {
		&:before, &:after { 
			@include transition(
				background-color $transition-time $transition-method,
				top $transition-time $transition-method,
				bottom $transition-time $transition-method,
				transform $transition-time $transition-method
			); 
		}

		span:before, span:after {
			@include transition(
				background-color $transition-time $transition-method,
				opacity $transition-time $transition-method,
				transform $transition-time $transition-method
			);
		}

		&[data-property="open"] {
			&:before, &:after {
				background-color: $open-color;
				opacity: 1;
				@include transform(scaleX(.7));
			}
			&:before {
				top: (round(($height*.5)-($bar-height/2)));
			}
			&:after {
				bottom: (round(($height*.5)-($bar-height/2)));
			}
			span:before, span:after { 
				background-color: $open-color;
				opacity: 0;
			 	@include transform(scaleX(.7)); 
			 }
		}
	}

	@if $method == expand {
		&:before, &:after { 
			@include transition(
				background-color $transition-time $transition-method,
				top $transition-time $transition-method,
				bottom $transition-time $transition-method
			); 
		}

		span:before, span:after {
			@include transition(
				background-color $transition-time $transition-method
			);
		}

		&[data-property="open"] {
			&:before, &:after {
				background-color: $open-color;
				opacity: 1;
			}
			&:before {
				top: -($height/4);
			}
			&:after {
				bottom: -($height/4);
			}
			span:before, span:after { 
				background-color: $open-color;
			}
		}
	}
}